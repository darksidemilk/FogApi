#
# Module manifest for module 'FogApi'
#
# Generated by: JJ Fullmer
#
# Generated on: 9/5/2024
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'FogApi.psm1'

# Version number of this module.
ModuleVersion = '2409.9.5'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = '7aa922fa-bb4f-46a0-a478-684e9535c65d'

# Author of this module
Author = 'JJ Fullmer'

# Company or vendor of this module
CompanyName = 'FOG Project'

# Copyright statement for this module
Copyright = '2018-2024'

# Description of the functionality provided by this module
Description = '
        # Overview
    
        This is a powershell module to make using the Fog Project API even easier.
        This module is used to easily run Fog API commands on your fogserver from a powershell console or script.
        FOG is an opensource tool for imaging comptuters, this module uses the API on your internal fog server to perform almost any operation you can do in the GUI of Fog and provides you with the ability to extend things further.
        It can be used to create more automation or to simply have a command line method of controlling fog operations.
        This essentially gives you a crossplatform commandline interface for fog tasks and makes many things easier to automate.
        
        Docs for this module can be found at https://fogapi.readthedocs.io/en/latest/

        For more information about FOG see

        - https://FOGProject.org
        - https://docs.fogproject.org
        - https://github.com/FOGProject
        - https://github.com/FOGProject/fogproject
        - https://forums.fogproject.org

        # Versioning

        The versioning of this module follows this pattern

        `{Year|Month}.{Major Version}.{Revision #}`

        ## Year/Month

        This versioning shows you first the Year and month this version of the module was published, giving you an idea of when it was last updated.
        i.e. 2208 would be august 2022.

        ## Major

        The Major version follows the typical major versioning where any major changes will increment this version number, especially possible breaking changes or structural changes, etc.

        ## Minor/Revision

        Any time I publish a new version that isn''t a major change I''ll increment the revision. This may also be incremented for each build test and increment by more than one for each published version
        
        # Installation
    
        To install this module you need at least powershell v3, it was originally created with 5.1,
        but now for BEST EXPERIENCE use Powershell Core 7+ to be able to use tab completion when running Fog 1.6
        
        To Install this module follow these steps
        
        ## Install from PSgallery
    
        - Easiest method: Install from PSGallery https://www.powershellgallery.com/packages/FogApi with powershellget or PSResourceGet
          - `Install-Module -name FogApi -Scope AllUsers`
          - `Install-PSResource -Name FogApi -scope -Scope AllUsers`
        - updating is then as easy as
          - `Update-Module -name FogApi`
          - `Update-PSResource -Name FogApi`
    
        ## Install with Chocolatey
    
        If you have chocolatey package manager, you can use the published package that manually installs the module the same way the PSGet managers do.
        https://community.chocolatey.org/packages/FogApi
        See https://chocolatey.org for more information on chocolatey package manager
    
        - Install with chocolatey (will install the module by copying the built version to the powershell core and windows powershell paths, will remove any existing versions)
          - `choco install fogapi -y`
        - Upgrading is as easy as (note that you can also use this same command for a new install)
          - `choco upgrade fogapi -y`
    
        ## Install Manually
    
        ### Use assets from the release
    
            - Use Chocolatey, PackageManagement, or Nuget to install the *chocolatey.nupkg or *.psgallery.nupkg file from the release assets
            - Extract the *builtModule.zip from the release and run `import-module` on the resulting folder for a portable installation. 
            - You can also extract to the paths outlined below in the manual build install steps for a more system wide install
        
        ### Manually Build
    
            - download the zip of this repo and extract it (or use git clone)
                - Or clone the repo using your favorite git tool, you just need the FogApi Folder this readme is in
            - Run the build.ps1 script (use the -noverstep switch)
            - Copy the built module folder (.\_module_build) into...
                - For Windows Powershell v3-v5.1
                    - C:\Program Files\WindowsPowershell\Modules\FogApi
                - For Powershell Core (pwsh) on Windows v7+
                    - C:\Program Files\PowerShell\Modules\FogApi
                - For Linux Powershell Core (pwsh) v7+
                    - /usr/local/share/powershell/Modules/FogApi
                - For Mac Powershell Core (pwsh) v7+ (untested)
                    - /usr/local/share/powershell/Modules/FogApi
                        - I haven''t tested this on a mac, the module folder may be somewhere else
                        this is based on where it is in other powershell core installs
            - Open powershell (as admin recommended)
            - Run `Import-Module FogApi`
    
        The module is now installed and loaded in your session
    
        # Usage
    
        You can use Set-fogserverSettings to set your fogserver hostname and api keys.
        The first time you try to run a command the settings.json file will automatically open
        in notepad on windows, nano on linux, or TextEdit on Mac
        You can also open the settings.json file and edit it manually before running your first command.
        The default settings are explanations of where to find the proper settings since json can''''t have comments
    
        Once the settings are set you can have a jolly good time utilzing the fog documentation
        found here https://news.fogproject.org/simplified-api-documentation/ that was used to model the parameters
    
        i.e.
    
        `Get-FogObject` has a type param that validates to `object, objectactivetasktype, and search` as those are the options given in the documentation.
        Each of those types validates (which means autocompletion) to the core types listed in the documentation.
        So if you typed in `Get-FogObject -Type object -Object h` and then started hitting tab, it would loop through the possible core objects you can get from the api that start with `h` such as history, host, etc.
    
        Unless you filter a GET with a json body it will return all the results into a powershell object. 
        That object is easy to work with to create other commands. Note: Full Pipeline support will come at a later time
        i.e.
        
        ```
        hosts = Get-FogObject -Type Object -CoreObject Host # calls GET on {your-fog-server}/fog/host to list all hosts
        ```
    
        Now you can search all your hosts for the one or ones you are looking for with powershell
        maybe you want to find all the hosts with ''IT'' in the name  (note `?` is an alias for `Where-Object`)
        
        ```
        $ITHosts = $hosts.data | ? name -match ''IT'';
        ```
        
        Now maybe you want to change the image all of these computers use to one named ''''IT-Image''''
        You can edit the object in powershell with a foreach-object (`%` is an alias for `foreach-object`)
        
        ```
        #get the id of the image by getting all images and finding the one with the IT-image name
        $image = Get-FogImages | ? name -eq "IT-image"
        $updatedITHosts = $ITHosts | % { $_.imageid = $image.id}
        ```
        
        Then you need to convert that object to json and pass each object into one api call at a time. Which sounds complicated, but it''''s not, it''''s as easy as
        
        ```
        $updatedITHosts | % {
            $jsonData = $_ | ConvertTo-Json;
            Update-FogObject -Type object -CoreObject host -objectID $_.id -jsonData jsonData;
            #successful result of updated objects properties
            #or any error messages will output to screen for each object
        }
        ```
    
        This is just one small example of the limitless things you can do with the api and powershell objects.
        There are also many ''helper'' functions that make various operations easier.
        i.e. Maybe you want to create a host and deploy that "IT-image" image to it.
        
        ```
        #create the host
        New-FogHost -name "test-host" -macs "01:23:45:67:89:00"
        
        #add the image to the host
        $foghost = get-foghost -hostname "test-host";
        $image = Get-FogImages | ? name -eq "IT-image"
        $foghost.imageid = $image.id;
        $jsonData = $fogHost | ConvertTo-Json;
        Update-FogObject -Type object -CoreObject host -objectID $foghost.id -jsonData jsonData;
        
        #start the image task on the host now
        get-foghost -hostname "test-host" | send-fogimage
        ```

        ```
        #alternatively, schedule the image for later, like 10pm tomorrow
        get-foghost -hostname "test-host" | send-fogimage -StartAtTime (Get-Date 10pm).AddDays(1)
        ```
    
        # Additional info
    
        See also the fogforum thread for the module https://forums.fogproject.org/topic/12026/powershell-api-module/2
        '

# Minimum version of the PowerShell engine required by this module
PowerShellVersion = '3.0'

# Name of the PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# ClrVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = 'Add-FogHostMac', 'Add-FogResultData', 'Approve-FogPendingMac', 
               'Deny-FogPendingMac', 'Disable-FogApiHTTPS', 'Dismount-WinEfi', 
               'Enable-FogApiHTTPS', 'Find-FogObject', 'Get-FogActiveTasks', 
               'Get-FogGroupAssociations', 'Get-FogGroupByName', 'Get-FogGroups', 
               'Get-FogHost', 'Get-FogHostAssociatedSnapins', 'Get-FogHostGroup', 
               'Get-FogHostMacs', 'Get-FogHostPendingMacs', 'Get-FogHosts', 
               'Get-FogImages', 'Get-FogInventory', 'Get-FogLog', 
               'Get-FogMacAddresses', 'Get-FogModules', 'Get-FogObject', 
               'Get-FogSecsSinceEpoch', 'Get-FogServerSettings', 
               'Get-FogServerSettingsFile', 'Get-FogSetting', 'Get-FogSettings', 
               'Get-FogSnapinAssociations', 'Get-FogSnapins', 'Get-FogVersion', 
               'Get-LastImageTime', 'Get-WinBcdPxeID', 'Get-WinEfiMountLetter', 
               'Install-FogService', 'Invoke-FogApi', 'Mount-WinEfi', 'New-FogHost', 
               'New-FogObject', 'Receive-FogImage', 'Remove-FogObject', 
               'Remove-UsbMac', 'Repair-FogSnapinAssociations', 
               'Reset-HostEncryption', 'Resolve-HostID', 'Send-FogImage', 
               'Send-FogWolTask', 'Set-FogInventory', 'Set-FogServerSettings', 
               'Set-FogServerSettingsFileSecurity', 'Set-FogSetting', 
               'Set-FogSnapins', 'Set-WinToBootToPxe', 'Start-FogSnapin', 
               'Start-FogSnapins', 'Test-FogVerAbove1dot6', 'Update-FogObject'

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = @()

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = 'Add-FogHost', 'Add-FogObject', 'Add-FogSnapins', 'Capture-FogImage', 
               'Deploy-FogImage', 'Get-FogAssociatedSnapins', 'Get-FogGroup', 
               'Get-FogHostInventory', 'Get-FogHostSnapinAssociations', 
               'Get-FogHostSnapins', 'Get-FogMacs', 'Get-MacsForHost', 
               'Get-WinInventoryForFog', 'Invoke-FogImageCapture', 'Pull-FogImage', 
               'Push-FogImage', 'Remove-FogMac', 'Save-FogImage', 'Set-FogObject'

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = 'fog', 'fogapi', 'imaging', 'provisioning', 'fogproject'

        # A URL to the license for this module.
        LicenseUri = 'https://github.com/darksidemilk/FogApi/blob/master/LICENSE'

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/darksidemilk/FogApi'

        # A URL to an icon representing this module.
        IconUri = 'https://cdn.statically.io/gh/darksidemilk/FogApi/0ed5e87e/FogApi/icons/favicon.png'

        # ReleaseNotes of this module
        ReleaseNotes = '
# 2409.9.5

	Updated and unified various docs, added icon packaging with best practicies for chocolatey and psgallery. Updated chocolatey packaging and build functions.'

        # Prerelease string of this module
        # Prerelease = ''

        # Flag to indicate whether the module requires explicit user acceptance for install/update/save
        # RequireLicenseAcceptance = $false

        # External dependent modules of this module
        # ExternalModuleDependencies = @()

    } # End of PSData hashtable


    # Title
    Title = 'FogApi'

} # End of PrivateData hashtable

# HelpInfo URI of this module
HelpInfoURI = 'https://fogapi.readthedocs.io/en/latest/'

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}

